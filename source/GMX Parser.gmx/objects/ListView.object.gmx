<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lvX = x; // 리스트뷰 X좌표
lvY = y; // 리스트뷰 Y좌표
lvW = 192; // 리스트뷰의 가로 길이
lvH = room_height - y; // 리스트뷰의 세로 길이

lvItemH = 100; // 항목의 세로 길이
lvItemSectionH = 60; // section(type=2)의 세로 길이
lvItemMargin = 2; // 항목 간 간격

// font size
lvSizeText = 48; // text, menutext에 들어가는 텍스트 크기를 지정합니다.
lvSizeSubText = 40; // subtext에 들어가는 텍스트 크기를 지정합니다.


// dpi auto control
scale = 1; // dpi 보정 시 PC와 모바일의 배율 차이를 지정하기 위한 변수

//작동 환경마다 배율을 다르게 합니다.
if (os_type == os_android or os_type == os_ios) // mobile
    scale = 1;
if (os_type == os_windows) // PC
    scale = 1.7;

//dpi에 따라 크기를 자동 조정합니다.(수정하지 않습니다.)
lvItemH = round(lvItemH * scale / 420 * display_get_dpi_x());
lvItemSectionH = round(lvItemSectionH * scale / 420 * display_get_dpi_x());

lvSizeText = round(lvSizeText * scale / 420 * display_get_dpi_x());
lvSizeSubText = round(lvSizeSubText * scale / 420 * display_get_dpi_x());

// for scroll
lvSY = 0; // 리스트뷰 내 스크롤 좌표
lvFriction = 0.3; // 스크롤 마찰력
lvMaxSpeed = 100 * scale / 420 * display_get_dpi_x(); // 스크롤 최대 속도
lvSS = 0; // 스크롤 속도 변수
lvPY = 0; // 스크롤 마우스 임시 변수
lvMouseClicked = 1; // 마우스 클릭 상태 변수 2 = 클릭함, 1 = 클릭 안 함
lvMX = 0; // 스크롤 마우스 임시 변수, 클릭 시의 마우스 좌표(시작점)를 저장할 때 씁니다
lvMY = 0; // lvMX와 동일
lvMYY = 0;  // 스크롤 마우스 임시 변수
maxy = 0; // 스크롤되는 최대 범위 지정
// for wheel control
lvSP = 30; // 휠 스크롤 속도 지정

// for menutext
lvMTIndex = -1; // 표시할 menutext의 항목 index
lvMTDraw = 0; // menutext 표시 딜레이 설정, room_speed보다 클 때 menutext 표시함
lvMTMX = 0; // menutext 를 표시할 x좌표 변수
lvMTMY = 0; // menutext 를 표시할 y좌표 변수
lvMTA = 0; // menutext 애니메이션 효과에서 alpha 저장 변수

lvClickIndex = -1; // 클릭된 항목의 index를 저장하는 변수, -1 = 아무 항목도 클릭되지 않음

lvItemCount = 0; // 리스트뷰의 항목 갯수
for(var i = 0; i &lt; lvItemCount; i++) { // 항목의 값 initialize함
    lvItemType[i] = 0; // 이 변수는 항목의 종류를 정의합니다 (0 = 버튼, 1 = 체크박스, 2 = 구역)
    lvItemText[i] = ""; // 항목에 표시할 텍스트를 정의합니다. (공백 가능)
    lvItemSubText[i] = ""; // 항목에 표시할 서브텍스트(텍스트 밑에 표시됨)를 정의합니다. (공백 가능)
    lvItemMenuText[i] = ""; // 항목에 표시할 메뉴텍스트(항목 위에 마우스를 올려놓았을 때 표시됨)를 정의합니다. (공백 가능)
    lvItemEnabled[i] = 1; // 항목의 활성화 여부를 정의합니다. 비활성화 시 클릭 불가능
    lvItemChecked[i] = 0; // 항목이 체크박스일 경우 그 값을 저장합니다.
    lvItemAnim[i, 0] = 0; // 클릭 애니메이션을 위한 변수
    lvItemAnim[i, 1] = 0; // 체크박스 애니메이션을 위한 변수
}

// 표시 옵션
lvItemShowLine = 1; // 항목 간 구분선을 표시할 건지 설정합니다.
lvItemShowMouse = 1; // 마우스가 항목 위에 놓였을 때 해당 항목에 효과가 나타나게 할 건지 설정합니다.(모바일 비추천)
lvShowScrollBar = 1; // 리스트뷰 우측에 스크롤바를 표시할 건지 설정합니다.
lvShowMenuText = 0; // 메뉴텍스트를 표시할 건지 설정합니다.(모바일 비추천)

// 기타 옵션
lvContWheel = 1; // 마우스 휠로 스크롤 조작을 할 수 있게 할 건지 설정합니다.

// 애니메이션 옵션
lvAnimCheck = 1; // 켜면 체크박스가 부드럽게 변합니다.
lvAnimButtonClick = 1; // 켜면 항목 효과가 부드럽게 표시됩니다.
lvAnimMenuText = 1; // 켜면 메뉴텍스트가 부드럽게 표시됩니다.


// set color
lvColorBG = make_colour_rgb(255, 255, 255); // 리스트뷰 전체 배경
lvColorButton[0] = make_colour_rgb(255, 255, 255); // 항목 기본 색
lvColorButton[1] = make_colour_rgb(220, 220, 220); // 항목 마우스가 닿았을 때
lvColorButton[2] = make_colour_rgb(200, 200, 200); // 항목 마우스로 클릭했을 때
lvColorText[0] = make_colour_rgb(0, 0, 0); // 항목의 텍스트 색
lvColorText[1] = make_colour_rgb(100, 100, 100); // 비활성화 시 도는 서브텍스트 색
lvColorText[2] = make_colour_rgb(0, 0, 0); // 항목의 메뉴텍스트 색
lvColorSection = make_colour_rgb(255, 255, 255); // 구역 텍스트 색
lvColorSectionBG = make_colour_rgb(0, 128, 255); // 구역 배경 색
lvColorCBox[0] = make_colour_rgb(100, 100, 100); // 체크박스 off 시
lvColorCBox[1] = make_colour_rgb(0, 128, 255); // 체크박스 on 시
lvColorLine = make_colour_rgb(150, 150, 150); // 항목 간 구분선 색
lvColorScrollBar = make_colour_rgb(0, 0, 0); // 스크롤바 색
lvColorMenuText[0] = make_colour_rgb(0, 0, 0); // 메뉴텍스트 배경 외각선 색
lvColorMenuText[1] = make_colour_rgb(255, 255, 255); // 메뉴텍스트 배경색

// set font

lvFontText = fontNanumGothicCoding;//font_add("NanumBarunGothic.ttf", lvSizeText, 0, 0, 32, 255); // 텍스트, 메뉴텍스트용 폰트
lvFontSubText = fontNanumGothicCoding;//font_add("NanumBarunGothic.ttf", lvSizeSubText, 0, 0, 32, 255); // 서브텍스트, 구역용 폰트

//항목정의 영역//
//addItem(self, 0, "", "", "", 1, 1);
//--------------------//

for(var i = 0; i &lt; lvItemCount; i++) { // 체크박스 애니메이션을 위한 부분입니다. 수정하지 않습니다.
    lvItemAnim[i, 0] = lvItemChecked[i] * 100;
}

//custom
eventName[0] = "생성 시";
eventName[1] = "파괴 시";
eventName[2] = "알람";
eventName[3] = "스텝";
eventName[4] = "충돌 시";
eventName[5] = "키보드";
eventName[6] = "마우스";
eventName[7] = "기타";
eventName[8] = "드로우";
eventName[9] = "키보드 누름";
eventName[10] = "키보드 뗌";
eventName[11] = "비동기";

enumbName[0, 0] = "";

enumbName[1, 0] = "";

enumbName[2, 0] = "알람 0";
enumbName[2, 1] = "알람 1";
enumbName[2, 2] = "알람 2";
enumbName[2, 3] = "알람 3";
enumbName[2, 4] = "알람 4";
enumbName[2, 5] = "알람 5";
enumbName[2, 6] = "알람 6";
enumbName[2, 7] = "알람 7";
enumbName[2, 8] = "알람 8";
enumbName[2, 9] = "알람 9";
enumbName[2, 10] = "알람 10";
enumbName[2, 11] = "알람 11";

enumbName[3, 0] = "스텝";
enumbName[3, 1] = "스텝 전";
enumbName[3, 2] = "스텝 후";

enumbName[6, 0] = "왼쪽 버튼";
enumbName[6, 1] = "오른쪽버튼";
enumbName[6, 2] = "휠 버튼";
enumbName[6, 3] = "누르지 않음";
enumbName[6, 4] = "왼족 버튼 누름";
enumbName[6, 5] = "오른쪽 버튼 누름";
enumbName[6, 6] = "휠 버튼 누름";
enumbName[6, 7] = "왼족 버튼 뗌";
enumbName[6, 8] = "오른쪽 버튼 뗌";
enumbName[6, 9] = "휠 버튼 뗌";
enumbName[6, 10] = "마우스 누름";
enumbName[6, 11] = "마우스 뗌";
enumbName[6, 60] = "마우스 휠 올림";
enumbName[6, 61] = "마우스 휠 내림";
enumbName[6, 50] = "글로벌 왼쪽 버튼";
enumbName[6, 51] = "글로벌 오른족 버튼";
enumbName[6, 52] = "글로벌 휠 버튼";
enumbName[6, 53] = "글로벌 왼쪽 버튼 누름";
enumbName[6, 54] = "글로벌 오른족 버튼 누름";
enumbName[6, 55] = "글로벌 휠 버튼 누름";
enumbName[6, 56] = "글로벌 왼쪽 버튼 뗌";
enumbName[6, 57] = "글로벌 오른족 버튼 뗌";
enumbName[6, 58] = "글로벌 휠 버튼 뗌";

enumbName[8, 0] = "드로우";
enumbName[8, 1] = "드로우 GUI";
enumbName[8, 2] = "드로우 시작";
enumbName[8, 3] = "드로우 끝";
enumbName[8, 4] = "드로우 GUI 시작";
enumbName[8, 5] = "드로우 GUI 끝";
enumbName[8, 6] = "프리 드로우";
enumbName[8, 7] = "포스트 드로우";
enumbName[8, 8] = "리사이즈";


//for debug
lvShowDebug = 0; // debug텍스트를 표시합니다. 개발용입니다.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
항목 클릭 시 동작을 정의합니다.
패런츠를 이용하여 리스트뷰를 정의하는 경우,
이부분의 내용을 전부 지운 뒤 자녀 오브젝트쪽에서 기존 내용과 같은 형식으로
lvClickIndex로 switch문을 작성하여 사용하면 됩니다.

체크박스의 경우 lvItemChecked[lvClickIndex] 로 클릭한 체크박스의 상태값을 가져올 수 있습니다.
*/

switch(lvClickIndex) {
    default:
        var xx = real(lvItemText[lvClickIndex]), yy = real(lvItemSubText[lvClickIndex]);
        for(var r = 0; r &lt; ds_list_size(parser_object.objCode[xx, yy]); r++)
        {
            Editor.text[r] = ds_list_find_value(parser_object.objCode[xx, yy], r);
            Editor.text_l = r + 1;
        }
        with(Editor) { textcolor_gen(); }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lvX = x; // 리스트뷰 X좌표
lvY = y; // 리스트뷰 Y좌표
lvW = 192; // 리스트뷰의 가로 길이
lvH = room_height - y; // 리스트뷰의 세로 길이
//
var touched = 0;

//maxy값 설정
maxy = 0;
for(var i = 0; i &lt; lvItemCount; i++) {
    if (lvItemType[i] != 2)
        maxy += lvItemH + lvItemMargin;
    else
        maxy += lvItemSectionH;
}

//스크롤 처리 (*제 스크롤링 예제를 참고하였습니다.)
if (lvMouseClicked == 2) {
    lvSY = lvMMY - (mouse_y - lvMY);
    lvSS = lvSY - lvPY;
}
if (0 &gt; lvSY or maxy - lvH &lt; lvSY) {
    lvSS = 0;
}
lvSY = max(0, min(maxy - lvH, lvSY)); // 스크롤이 밖으로 빠져나가지 않도록 함.
lvPY = lvSY;

//기존 스크롤링 예제의 vspeed를 가상으로 구현
if (lvMouseClicked == 1) {
    lvSS = min(max(lvSS, 0 - lvMaxSpeed), lvMaxSpeed);
    lvSY += lvSS;
    lvSS = lvSS - (lvSS - lvSS / (1 + lvFriction)) * 30 / room_speed;
    if (abs(lvSS) &lt; 1 and lvSS != 0) {
        lvSS = 0;
    }
}

lvSY = max(0, min(lvItemCount * (lvItemH + lvItemMargin) - lvH, lvSY)); // 스크롤이 밖으로 빠져나가지 않도록 함.

//메뉴텍스트 표시 지연 구현
if (lvMouseClicked != 2) {
    if (lvMX == mouse_x and lvMY == mouse_y) { // menutext
        lvMTDraw++;
        if lvMTDraw &gt; room_speed {
            lvMTIndex = lvClickIndex;
            lvMTMX = mouse_x;
            lvMTMY = mouse_y;
        }
    }
    else {
        lvMTDraw = 0;
    }
    if lvSS != 0 {
        lvMTDraw = 0
    }
    lvMX = mouse_x;
    lvMY = mouse_y;
}
else {
    lvMTDraw = 0;
}

lvSY = round(lvSY); // 스크롤 좌표 정수 처리

//마우스가 어느 항목에 닿았는지 탐지
if (lvMouseClicked != 2 and mouse_x &gt;= lvX and mouse_y &gt;= lvY and mouse_x &lt;= lvX + lvW and mouse_y &lt;= lvY + lvH) {
    var tty = lvY;
    for(var i = 0; i &lt; lvItemCount; i++) {
        ty = tty - lvSY;
        if (lvItemType[i] != 2 and lvMY &gt;= ty and lvMY &lt;= ty + lvItemH) {
            lvClickIndex = i;
            touched = 1;
            break;
        }
    
        if (lvItemType[i] != 2)
            tty += lvItemH + lvItemMargin;
        else
            tty += lvItemSectionH;
    }
    if touched == 0
        lvClickIndex = -1;
}
if (lvMouseClicked != 2 and touched == 0)
    lvClickIndex = -1;

if (lvMouseClicked == 2 and power(lvMX - mouse_x, 2) + power(lvMY - mouse_y, 2) &gt; 400) { // 스크롤 했는데 클릭이 되는 걸 방지
    lvClickIndex = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//아래로 스크롤
if (lvContWheel and (mouse_x &gt;= lvX and mouse_y &gt;= lvY and mouse_x &lt;= lvX + lvW and mouse_y &lt;= lvY + lvH)) {
    lvSS += lvSP;
    lvSY++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//위로 스크롤
if (lvContWheel and (mouse_x &gt;= lvX and mouse_y &gt;= lvY and mouse_x &lt;= lvX + lvW and mouse_y &lt;= lvY + lvH)) {
    lvSS -= lvSP;
    lvSY--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (lvMouseClicked == 2 and lvClickIndex != -1 and lvItemEnabled[lvClickIndex]) { // 항목 클릭시 이벤트
    lvItemChecked[lvClickIndex] = 1 - lvItemChecked[lvClickIndex]; // 체크박스 값을 변경합니다.
    
    alarm[11] = 1; // 클릭한 항목에 따라 동작을 하라고 명령
}


lvMouseClicked = 1;
lvClickIndex = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_x &gt;= lvX and mouse_y &gt;= lvY and mouse_x &lt;= lvX + lvW and mouse_y &lt;= lvY + lvH) {
    lvMouseClicked = 2;
    lvMY = mouse_y;
    lvMX = mouse_x;
    lvMMY = lvSY;
    
    lvClickIndex = -1;
    var tty = lvY, ty;
    for(var i = 0; i &lt; lvItemCount; i++) {
        ty = tty - lvSY;
        if (lvItemType[i] != 2 and lvMY &gt;= ty and lvMY &lt;= ty + lvItemH) {
            lvClickIndex = i;
            break;
        }
    
        if (lvItemType[i] != 2)
            tty += lvItemH + lvItemMargin;
        else
            tty += lvItemSectionH;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle_colour(lvX, lvY, lvX + lvW, lvY + lvH, lvColorBG, lvColorBG, lvColorBG, lvColorBG, 0); // 리스트뷰 배경 드로우

//메뉴텍스트 애니메이션 효과
if lvAnimMenuText
    lvMTA += floor(((lvMTDraw &gt; room_speed) * 100 - lvMTA) / 6);
else
    lvMTA = (lvMTDraw &gt; room_speed) * 100;

var tty = lvY;
for(var i = 0; i &lt; lvItemCount; i++) { // Draw ListView's items.
    //애니메이션 효과
    if lvAnimCheck {
        lvItemAnim[i, 0] += floor((lvItemChecked[i] * 100 - lvItemAnim[i, 0]) / 3 * room_speed / 60);
        if lvItemAnim[i, 0] &gt; 94 {
            lvItemAnim[i, 0] = 100;
        }
    }
    if lvAnimButtonClick {
        lvItemAnim[i, 1] += floor((((lvItemShowMouse and lvClickIndex == i) + (lvClickIndex == i and lvMouseClicked == 2) * (2 - lvItemShowMouse)) * 100 - lvItemAnim[i, 1]) / 3);
    }
    
    var tx, ty;
    if(lvItemType[i] != 2 and tty - lvSY + lvItemH &gt;= lvY and tty - lvSY &lt;= lvY + lvH) {
        tx = lvX;
        ty = tty - lvSY;
        
        if lvAnimButtonClick {
            draw_set_alpha(1);
            var col = lvColorButton[0];
            draw_rectangle_colour(tx, ty, tx + lvW, ty + lvItemH, col, col, col, col, 0); // 항목 기본 드로우
            col = lvColorButton[1];
            draw_set_alpha(lvItemAnim[i, 1] / 100);
            draw_rectangle_colour(tx, ty, tx + lvW, ty + lvItemH, col, col, col, col, 0); // 항목 마우스에 닿았을 때
            col = lvColorButton[2];
            draw_set_alpha(max(0, (lvItemAnim[i, 1] - 100) / 100));
            draw_rectangle_colour(tx, ty, tx + lvW, ty + lvItemH, col, col, col, col, 0); // 항목 클릭했을 때
            draw_set_alpha(1);
        }
        else {
            var col = lvColorButton[(lvItemShowMouse and lvClickIndex == i) + (lvClickIndex == i and lvMouseClicked == 2)];
            draw_rectangle_colour(tx, ty, tx + lvW, ty + lvItemH, col, col, col, col, 0); // 애니메이션 효과가 꺼져 있을 때 항목 드로우
        }
        // 텍스트 드로우
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_set_font(lvFontText);
        if lvItemSubText[i] = "" {
            draw_text_colour(tx + lvItemH / 2.5, ty + lvItemH / 2 + lvItemH / 25 - 1, eventName[real(lvItemText[i])], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], 1);
        }
        else {
            draw_text_colour(tx + lvItemH / 2.5, ty + lvItemH / 2 - lvItemH / 8.333 - 1, eventName[real(lvItemText[i])], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], lvColorText[1 - lvItemEnabled[i]], 1); // text
            draw_set_font(lvFontSubText);
            if real(lvItemText[i]) &lt; 4 || real(lvItemText[i]) == 6 || real(lvItemText[i]) == 8
                draw_text_colour(tx + lvItemH / 2.5, ty + lvItemH / 2 + lvItemH / 5 - 1, enumbName[real(lvItemText[i]), real(lvItemSubText[i])], lvColorText[1], lvColorText[1], lvColorText[1], lvColorText[1], 1); //subtext
            else
            draw_text_colour(tx + lvItemH / 2.5, ty + lvItemH / 2 + lvItemH / 5 - 1, lvItemSubText[i], lvColorText[1], lvColorText[1], lvColorText[1], lvColorText[1], 1); //subtext
        }
        
        // 체크박스 드로우
        if lvItemType[i] = 1 {
            if lvAnimCheck {
                /*
                draw_rectangle_colour(tx + lvW - lvItemH + 5, ty + 5, tx + lvW - 5, ty + lvItemH - 5, lvColorCBox[0], lvColorCBox[0], lvColorCBox[0], lvColorCBox[0], 0);
                draw_set_alpha(lvItemAnim[i, 0] / 100);
                draw_rectangle_colour(tx + lvW - lvItemH + 5, ty + 5, tx + lvW - 5, ty + lvItemH - 5, lvColorCBox[1], lvColorCBox[1], lvColorCBox[1], lvColorCBox[1], 0);
                draw_set_alpha(1);
                */
                // 위 주석의 주석 표시를 지우고 아랫부분을 주석처리하면 다른 효과가 나타납니다.
                draw_rectangle_colour(tx + lvW - lvItemH + 5, ty + 5, tx + lvW - 5, ty + lvItemH - 5, lvColorCBox[0], lvColorCBox[0], lvColorCBox[0], lvColorCBox[0], 0);
                var checkH = lvItemH - 10
                if lvItemAnim[i, 0]
                    draw_rectangle_colour(tx + lvW - lvItemH + 5 + (checkH / 2) * (100 - lvItemAnim[i, 0]) / 100, ty + 5 + (checkH / 2) * (100 - lvItemAnim[i, 0]) / 100, tx + lvW - 5 - (checkH / 2) * (100 - lvItemAnim[i, 0]) / 100, ty + lvItemH - 5 - (checkH / 2) * (100 - lvItemAnim[i, 0]) / 100, lvColorCBox[1], lvColorCBox[1], lvColorCBox[1], lvColorCBox[1], 0);
            } else
                draw_rectangle_colour(tx + lvW - lvItemH + 5, ty + 5, tx + lvW - 5, ty + lvItemH - 5, lvColorCBox[lvItemChecked[i]], lvColorCBox[lvItemChecked[i]], lvColorCBox[lvItemChecked[i]], lvColorCBox[lvItemChecked[i]], 0);
        }
        
        
        // 항목 간 구분선 드로우
        if (lvItemShowLine and i &lt; lvItemCount - 1 and lvItemType[i + 1] != 2)
            draw_line_colour(tx + lvItemH / 5, ty + lvItemH + 1, tx + lvW - lvItemH / 5, ty + lvItemH + 1, lvColorLine, lvColorLine);
    }
    if(lvItemType[i] == 2 and tty - lvSY + lvItemSectionH &gt;= lvY and tty - lvSY &lt;= lvY + lvH) {// 구역 드로우
        tx = lvX;
        ty = tty - lvSY;
        
        draw_rectangle_colour(tx, ty, tx + lvW, ty + lvItemSectionH, lvColorSectionBG, lvColorSectionBG, lvColorSectionBG, lvColorSectionBG, 0); // 구역 배경 드로우
        
        // 구역 텍스트 드로우
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_set_font(lvFontSubText);
        draw_text_colour(tx + lvItemH / 2.5, ty + lvItemSectionH / 2 + 1, lvItemText[i], lvColorSection, lvColorSection, lvColorSection, lvColorSection, 1);
    }
    if (lvItemType[i] != 2)
        tty += lvItemH + lvItemMargin;
    else
        tty += lvItemSectionH;
}

// 스크롤바 드로우
if (lvShowScrollBar and maxy &gt; lvH) {
    draw_set_alpha(0.5);
    var barH = (lvH - lvW / 50) / maxy * (lvH - lvW / 50);
    draw_rectangle_colour(lvX + lvW - lvW / 50, 
                            lvY + lvW / 100 + (lvSY / (maxy - lvH) * (lvH - lvW / 50 - barH)), 
                            lvX + lvW - lvW / 100, 
                            lvY + lvW / 100 + (lvSY / (maxy - lvH) * (lvH - lvW / 50 - barH)) + barH, 
                            lvColorScrollBar, lvColorScrollBar, lvColorScrollBar, lvColorScrollBar, 0);
    draw_set_alpha(1);
}

// 메뉴텍스트 드로우
if (lvMTIndex != -1 and lvItemMenuText[lvMTIndex] != "" and lvShowMenuText) {
    draw_set_alpha(lvMTA / 100);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_set_font(lvFontText);
    var tmptxt = lvItemMenuText[lvMTIndex];
    for(var i = 0; i &lt; string_length(tmptxt); i++) {
        if (string_width(string_copy(tmptxt, 1, i + 1)) &gt; lvW - (lvMTMX - lvX) - 10 and 
            lvSizeText * 3 &lt; lvW - (lvMTMX - lvX)) { // 글자가 리스트뷰 밖으로 나온다면
            tmptxt = string_insert(chr(10), tmptxt, i); // 줄바꿈
        }
    }
    draw_rectangle_colour(lvMTMX, lvMTMY, lvMTMX + string_width(tmptxt) + lvW / 50, lvMTMY + string_height(tmptxt) + lvW / 50, lvColorMenuText[1], lvColorMenuText[1], lvColorMenuText[1], lvColorMenuText[1], 0);
    draw_rectangle_colour(lvMTMX, lvMTMY, lvMTMX + string_width(tmptxt) + lvW / 50, lvMTMY + string_height(tmptxt) + lvW / 50, lvColorMenuText[0], lvColorMenuText[0], lvColorMenuText[0], lvColorMenuText[0], 1);
    draw_text_colour(lvMTMX + lvW / 100, lvMTMY + lvW / 100, tmptxt, lvColorText[2], lvColorText[2], lvColorText[2], lvColorText[2], lvMTA / 100);
    draw_set_alpha(1);
}


//디버그용
if lvShowDebug {
draw_text(600 * scale / 420 * display_get_dpi_x(), 600 * scale / 420 * display_get_dpi_x(), lvMouseClicked);
draw_text(600 * scale / 420 * display_get_dpi_x(), 660 * scale / 420 * display_get_dpi_x(), lvSY);
draw_text(600 * scale / 420 * display_get_dpi_x(), 720 * scale / 420 * display_get_dpi_x(), maxy);
draw_text(600 * scale / 420 * display_get_dpi_x(), 780 * scale / 420 * display_get_dpi_x(), lvSS);
draw_text(600 * scale / 420 * display_get_dpi_x(), 840 * scale / 420 * display_get_dpi_x(), lvClickIndex);
draw_text(600 * scale / 420 * display_get_dpi_x(), 900 * scale / 420 * display_get_dpi_x(), fps_real);
draw_text(600 * scale / 420 * display_get_dpi_x(), 960 * scale / 420 * display_get_dpi_x(), fps);
draw_text(600 * scale / 420 * display_get_dpi_x(), 1020 * scale / 420 * display_get_dpi_x(), mouse_x);
draw_text(600 * scale / 420 * display_get_dpi_x(), 1080 * scale / 420 * display_get_dpi_x(), mouse_y);
draw_text(600 * scale / 420 * display_get_dpi_x(), 1140 * scale / 420 * display_get_dpi_x(), mouse_check_button(mb_left));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
