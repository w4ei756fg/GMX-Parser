<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sys_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>file = "";
src_l = 0; // 소스 파일의 라인 수

sound_c = 0;
sprites_c = 0;
background_c = 0;
paths_c = 0;
scripts_c = 0;
shaders_c = 0;
fonts_c = 0;
objects_c = 0;
timelines_c = 0;
rooms_c = 0;

yview = 0;
xview = 0;

key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xview = min(0, xview);
yview = min(0, yview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yview -= 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xview -= 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yview += 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xview += 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yview -= 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yview += 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>file = get_open_filename("project file|*.project.gmx", "");
if (file != "")
{
    file_s = file_text_open_read(file);
    var i = 0;
    while (!file_text_eof(file_s))
    {
        src[i] = file_text_read_string(file_s);
        file_text_readln(file_s);
        src_l = i;
        i++;
    }
    file_text_close(file_s);
}

if (file != "" and src[0] == "&lt;!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!--&gt;")// File Check
{
    var i;
    for (i = 0; i &lt;= src_l; i++)
    {
        if (string_count('&lt;sounds name="sound"&gt;', src[i]) == 1) //Sound scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;sound&gt;sound\', string(src[s])) &gt;= 1)
                {
                    sound_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "n" and string_char_at(string(src[s]), c + 1) == "d" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "s")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    sound_n[sound_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;sprites name="sprites"&gt;', src[i]) == 1) //Sprites scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;sprite&gt;sprites\', string(src[s])) &gt;= 1)
                {
                    sprites_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "e" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "s")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    sprites_n[sprites_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;backgrounds name="background"&gt;', src[i]) == 1) //Backgrounds scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;background&gt;background\', string(src[s])) &gt;= 1)
                {
                    background_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "n" and string_char_at(string(src[s]), c + 1) == "d" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "b")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    background_n[background_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;paths name="paths"&gt;', src[i]) == 1) //Paths scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;path&gt;paths\', string(src[s])) &gt;= 1)
                {
                    paths_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "h" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "p")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    paths_n[paths_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;scripts name="scripts"&gt;', src[i]) == 1) //Scripts scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;script&gt;scripts\', string(src[s])) &gt;= 1)
                {
                    scripts_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "t" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "." and string_char_at(string(src[s]), c + 1) == "g" and string_char_at(string(src[s]), c + 2) == "m")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    scripts_n[scripts_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;shaders name="shaders"&gt;', src[i]) == 1) //Shaders scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;shader type="GLSLES"&gt;shaders\', string(src[s])) &gt;= 1)
                {
                    shaders_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "r" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "." and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "h")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    shaders_n[shaders_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;fonts name="fonts"&gt;', src[i]) == 1) //Fonts scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;font&gt;fonts\', string(src[s])) &gt;= 1)
                {
                    fonts_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "t" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "f")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    fonts_n[fonts_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;objects name="objects"&gt;', src[i]) == 1) //Objects scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;object&gt;objects\', string(src[s])) &gt;= 1)
                {
                    objects_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "t" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "o")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    objects_n[objects_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;timelines name="timelines"&gt;', src[i]) == 1) //Timelines scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;timeline&gt;timelines\', string(src[s])) &gt;= 1)
                {
                    timelines_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "e" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "t")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    timelines_n[timelines_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
        
        if (string_count('&lt;rooms name="rooms"&gt;', src[i]) == 1) //Rooms scan
        {
            var s;
            for (s = i; s &lt;= src_l; s++)
            {
                var str_ind, str_ind_end;
                if (string_count('&lt;room&gt;rooms\', string(src[s])) &gt;= 1)
                {
                    rooms_c++;
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "m" and string_char_at(string(src[s]), c + 1) == "s" and string_char_at(string(src[s]), c + 2) == "\")
                        {
                            str_ind = c + 3;
                            break;
                        }
                    }
                    var c;
                    for (c = 1; c &lt;= string_length(string(src[s])); c++)
                    {
                        if (string_char_at(string(src[s]), c) == "&lt;" and string_char_at(string(src[s]), c + 1) == "/" and string_char_at(string(src[s]), c + 2) == "r")
                        {
                            str_ind_end = c;
                            break;
                        }
                    }
                    rooms_n[rooms_c] = string_copy(string(src[s]), str_ind, str_ind_end - str_ind);
                }
            }
        }
    }
}
else
{
    show_message("오류 : 정상적인 GM:S 프로젝트 파일이 아니거나 경로가 올바르지 않습니다!")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (sound_c)
    draw_text(50 + xview, 80 + yview, "Sounds");
var i;
for(i = 1; i &lt;= sound_c; i++)
{
    draw_text(50 + xview, 80 + yview + 4 + i * 16, sound_n[i]);
}

if (sprites_c)
    draw_text(200 + xview, 80 + yview, "Sprites");
var i;
for(i = 1; i &lt;= sprites_c; i++)
{
    draw_text(200 + xview, 80 + yview + 4 + i * 16, sprites_n[i]);
}

if (background_c)
    draw_text(350 + xview, 80 + yview, "Backgrounds");
var i;
for(i = 1; i &lt;= background_c; i++)
{
    draw_text(350 + xview, 80 + yview + 4 + i * 16, background_n[i]);
}

if (paths_c)
    draw_text(500 + xview, 80 + yview, "Paths");
var i;
for(i = 1; i &lt;= paths_c; i++)
{
    draw_text(500 + xview, 80 + yview + 4 + i * 16, paths_n[i]);
}

if (scripts_c)
    draw_text(650 + xview, 80 + yview, "Scripts");
var i;
for(i = 1; i &lt;= scripts_c; i++)
{
    draw_text(650 + xview, 80 + yview + 4 + i * 16, scripts_n[i]);
}

if (shaders_c)
    draw_text(800 + xview, 80 + yview, "Shaders");
var i;
for(i = 1; i &lt;= shaders_c; i++)
{
    draw_text(800 + xview, 80 + yview + 4 + i * 16, shaders_n[i]);
}

if (fonts_c)
    draw_text(950 + xview, 80 + yview, "Fonts");
var i;
for(i = 1; i &lt;= fonts_c; i++)
{
    draw_text(950 + xview, 80 + yview + 4 + i * 16, fonts_n[i]);
}

if (objects_c)
    draw_text(1100 + xview, 80 + yview, "Objects");
var i;
for(i = 1; i &lt;= objects_c; i++)
{
    draw_text(1100 + xview, 80 + yview + 4 + i * 16, objects_n[i]);
}

if (timelines_c)
    draw_text(1250 + xview, 80 + yview, "Timelines");
var i;
for(i = 1; i &lt;= timelines_c; i++)
{
    draw_text(1250 + xview, 80 + yview + 4 + i * 16, timelines_n[i]);
}

if (rooms_c)
    draw_text(1400 + xview, 80 + yview, "Rooms");
var i;
for(i = 1; i &lt;= rooms_c; i++)
{
    draw_text(1400 + xview, 80 + yview + 4 + i * 16, rooms_n[i]);
}

draw_text(540, 0, key_debug); // key debug
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "Press down";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "Press right";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "Press up";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "Press left";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_debug = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
