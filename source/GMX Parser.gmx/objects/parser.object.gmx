<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>checksum = "&lt;!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!--&gt;";

res_name[0] = "Config";
res_name[1] = "sound";
res_name[2] = "sprite";
res_name[3] = "background";
res_name[4] = "path";
res_name[5] = "script";
res_name[6] = "shader";
res_name[7] = "font";
res_name[8] = "object";
res_name[9] = "timeline";
res_name[10] = "room";

res_name_help = "help";

project_init();

projectName = "";
helprtf = "";
/*
  &lt;Configs name="configs"&gt;
    &lt;Config&gt;Configs\Default&lt;/Config&gt;
  &lt;/Configs&gt;
  &lt;NewExtensions/&gt;
  &lt;sounds name="sound"&gt;
    &lt;sound&gt;sound\sound0&lt;/sound&gt;
  &lt;/sounds&gt;
  &lt;sprites name="sprites"&gt;
    &lt;sprite&gt;sprites\sprite0&lt;/sprite&gt;
  &lt;/sprites&gt;
  &lt;backgrounds name="background"&gt;
    &lt;background&gt;background\background0&lt;/background&gt;
  &lt;/backgrounds&gt;
  &lt;paths name="paths"&gt;
    &lt;path&gt;paths\path0&lt;/path&gt;
  &lt;/paths&gt;
  &lt;scripts name="scripts"&gt;
    &lt;script&gt;scripts\script0.gml&lt;/script&gt;
  &lt;/scripts&gt;
  &lt;shaders name="shaders"&gt;
    &lt;shader type="GLSLES"&gt;shaders\shader0.shader&lt;/shader&gt;
  &lt;/shaders&gt;
  &lt;fonts name="fonts"&gt;
    &lt;font&gt;fonts\font0&lt;/font&gt;
  &lt;/fonts&gt;
  &lt;objects name="objects"&gt;
    &lt;object&gt;objects\object0&lt;/object&gt;
    &lt;objects name="group1"&gt;
      &lt;object&gt;objects\object1&lt;/object&gt;
      &lt;objects name="group2"&gt;
        &lt;object&gt;objects\object2&lt;/object&gt;
      &lt;/objects&gt;
    &lt;/objects&gt;
  &lt;/objects&gt;
  &lt;timelines name="timelines"&gt;
    &lt;timeline&gt;timelines\timeline0&lt;/timeline&gt;
  &lt;/timelines&gt;
  &lt;rooms name="rooms"&gt;
    &lt;room&gt;rooms\room0&lt;/room&gt;
  &lt;/rooms&gt;
  &lt;help&gt;
    &lt;rtf&gt;help.rtf&lt;/rtf&gt;
  &lt;/help&gt;
  &lt;TutorialState&gt;
    &lt;IsTutorial&gt;0&lt;/IsTutorial&gt;
    &lt;TutorialName&gt;&lt;/TutorialName&gt;
    &lt;TutorialPage&gt;0&lt;/TutorialPage&gt;
  &lt;/TutorialState&gt;
&lt;/assets&gt;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_green);
for(var i = 0; i &lt; 11; i++)
{
    draw_text(10, 10 + 20 * i, res_name[i] + "res[" + string(i) + "]: " + string(ds_list_size(res_res[i])));
    draw_text(210, 10 + 20 * i, res_name[i] + "path[" + string(i) + "]: " + string(ds_list_size(res_path[i])));
}

//for(var i = 0; i &lt; ; i++)
{
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_control)
{
    var filename = get_open_filename("GameMaker files|*.project.gmx", "");
    if (filename != "")
    {
        project_clear();
        //file load
        var file = file_text_open_read(filename), text_l = 0;
        while(!file_text_eof(file))
        {
            text[text_l] = file_text_read_string(file);
            file_text_readln(file);
            text_l++;
        }
        file_text_close(file);
        
        //check correct file
        if (text[0] == checksum)
        {
            opened = ""; // tree path
            ropened = -1; // opened resource
            //parse
            for(var i = 1; i &lt; array_length_1d(text); i++)
            {
                var current_text = text[i];
                if (opened == "")
                {
                    for(var r = 0; r &lt; 11; r++)
                    if string_count('&lt;' + res_name[r] + 's name="', text[i]) // resource group
                    {
                        var pos = string_pos('&lt;' + res_name[r] + 's name="', text[i]) + string_length('&lt;' + res_name[r] + 's name="');
                        opened = string_copy(text[i], pos, string_pos('"&gt;', text[i]) - pos);
                        ropened = r;
                        break;
                    }
                }
                else
                {
                    if string_count('&lt;' + res_name[ropened] + 's name="', text[i]) // group
                    {
                        var pos = string_pos('&lt;' + res_name[ropened] + 's name="', text[i]) + string_length('&lt;' + res_name[ropened] + 's name="');
                        opened += "/" + string_copy(text[i], pos, string_pos('"&gt;', text[i]) - pos);
                    }
                    else if string_count('&lt;' + res_name[ropened] + '&gt;', text[i]) // resource
                    {
                        var pos = string_pos('&lt;' + res_name[ropened] + '&gt;', text[i]) + string_length('&lt;' + res_name[ropened] + '&gt;');
                        var path = string_copy(text[i], pos, string_pos('&lt;/' + res_name[ropened] + '&gt;', text[i]) - pos), rname = path;
                        
                        for(var r = string_length(path); r &gt; 0; r--) // resource name filtering
                        if string_char_at(path, r) == "\"
                        {
                            rname = string_delete(path, 1, r);
                            break;
                        }
                        
                        ds_list_add(res_res[ropened], opened + "/" + rname);
                        ds_list_add(res_path[ropened], path);
                    }
                    else if string_count('&lt;/' + res_name[ropened] + 's&gt;', text[i]) // &lt;/tag&gt;
                    {
                        var r;
                        for(r = string_length(opened); r &gt; 0; r--) // group &lt;/tag&gt;
                        {
                            if string_char_at(opened, r) == "/"
                            {
                                opened = string_copy(opened, 1, r - 1);
                                break;
                            }
                        }
                        if (r == 0)
                            opened = "";
                    }
                }
            }
        }
        else
        {
            show_message("Incorrect file.");
        }
        
        //display
        for(var i = 0; i &lt; 11; i++)
        {
            show_debug_message(res_name[i]);
            show_debug_message("----------------");
            for(var r = 0; r &lt; ds_list_size(res_res[i]); r++)
                show_debug_message(ds_list_find_value(res_res[i], r) + "  (" + ds_list_find_value(res_path[i], r) + ")");
            show_debug_message("------------------------------------------------------------------");
        }
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
